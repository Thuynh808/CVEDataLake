---
- name: Download, process, and send Athena query results
  hosts: localhost
  vars_files:
    - vars.yaml
  tasks:
    - name: Define Athena queries
      set_fact:
        athena_output_location: "s3://{{ bucket_name }}/athena-results/"
        queries:
          - name: "10 Most Recent Vulnerabilities"
            query: >
              SELECT cve_id, description, cvss_v3_base_score, published_date
              FROM "{{ glue_database_name }}.{{ glue_table_name }}"
              ORDER BY published_date DESC
              LIMIT 5;

    - name: Execute Athena queries and capture execution IDs
      loop: "{{ queries }}"
      loop_control:
        label: "{{ item.name }}"
      command: >
        aws athena start-query-execution
        --query-string "{{ item.query }}"
        --query-execution-context Database={{ glue_database_name }}
        --result-configuration OutputLocation={{ athena_output_location }}
      register: query_results
      retries: 3
      delay: 10

    - name: Parse and store execution IDs
      set_fact:
        execution_ids: "{{ query_results.results | map(attribute='stdout') | map('regex_search', '\"QueryExecutionId\": \"(.*?)\"', '\\1') | list | flatten }}"

    - name: Download CSV files by execution IDs
      loop: "{{ execution_ids | zip(queries) }}"
      loop_control:
        label: "{{ item[1].name }}"
      command: >
        aws s3 cp
        "{{ athena_output_location }}{{ item[0] }}.csv"
        "/tmp/{{ item[1].name | replace(' ', '_') }}.csv"
      register: s3_download_results
      retries: 3
      delay: 10

    - name: Verify downloaded files
      loop: "{{ execution_ids | zip(queries) }}"
      loop_control:
        label: "{{ item[1].name }}"
      stat:
        path: "/tmp/{{ item[1].name | replace(' ', '_') }}.csv"
      register: local_csv_files
      failed_when: not local_csv_files.stat.exists

    - name: Format CSV files into tables
      loop: "{{ queries }}"
      loop_control:
        label: "{{ item.name }}"
      command: >
        python3 ./scripts/format-cve.py
        --file /tmp/{{ item.name | replace(' ', '_') }}.csv
        --query-name "{{ item.name }}"
      register: formatted_output
      failed_when: formatted_output.rc != 0

    - name: Aggregate formatted tables
      set_fact:
        aggregated_table: |
          {% for result in formatted_output.results %}
          {{ result.stdout }}
          {% endfor %}
    - name: Send formatted report via SNS
      command: >
        aws sns publish
        --topic-arn "{{ sns_arn }}"
        --message "{{ aggregated_table }}"
        --subject "CVE Query Results"

